# SPEC-036: Authentication API
## Complete REST API Endpoints for Authentication

> **Status**: ‚úÖ COMPLETE  
> **Priority**: CRITICAL  
> **Estimated Time**: 6 hours  
> **Dependencies**: SPEC-035 (Supabase Auth Config)

---

## üìã OVERVIEW

Complete RESTful API specification for all authentication and authorization operations. This includes 10 core endpoints covering login, registration, password management, session handling, and user profile operations.

---

## üéØ API ENDPOINTS SUMMARY

| Endpoint | Method | Purpose | Auth Required |
|----------|--------|---------|---------------|
| `/api/auth/signup` | POST | Register new user | No |
| `/api/auth/login` | POST | Sign in user | No |
| `/api/auth/logout` | POST | Sign out user | Yes |
| `/api/auth/refresh` | POST | Refresh access token | Yes |
| `/api/auth/forgot-password` | POST | Request password reset | No |
| `/api/auth/reset-password` | POST | Reset password with token | No |
| `/api/auth/change-password` | POST | Change current password | Yes |
| `/api/auth/verify-email` | POST | Verify email address | No |
| `/api/auth/resend-verification` | POST | Resend verification email | No |
| `/api/auth/me` | GET | Get current user | Yes |

---

## üìù DETAILED API SPECIFICATION

### 1. Sign Up (Register)

**Endpoint**: `POST /api/auth/signup`  
**Authentication**: Not required  
**Rate Limit**: 3 requests per hour per IP

#### Request Body
```json
{
  "email": "teacher@school.com",
  "password": "StrongPass123!",
  "first_name": "John",
  "last_name": "Doe",
  "role": "teacher",
  "phone": "+1234567890",
  "tenant_id": "school-123",
  "invite_code": "INVITE123"
}
```

#### Validation Rules
```yaml
email:
  required: true
  format: email
  maxLength: 255
  unique: true
password:
  required: true
  minLength: 8
  maxLength: 128
  pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]"
first_name:
  required: true
  minLength: 1
  maxLength: 50
  pattern: "^[a-zA-Z\\s]*$"
last_name:
  required: true
  minLength: 1
  maxLength: 50
  pattern: "^[a-zA-Z\\s]*$"
role:
  required: true
  enum: ["student", "parent", "teacher", "admin", "staff"]
```

#### Success Response (201 Created)
```json
{
  "success": true,
  "message": "Account created successfully. Please check your email for verification.",
  "data": {
    "user": {
      "id": "uuid-here",
      "email": "teacher@school.com",
      "email_confirmed_at": null,
      "first_name": "John",
      "last_name": "Doe",
      "role": "teacher",
      "created_at": "2025-10-05T10:00:00Z"
    },
    "verification_sent": true
  }
}
```

#### Error Responses
```json
// 400 Bad Request - Validation Error
{
  "success": false,
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Validation failed",
    "details": {
      "email": ["Email is already registered"],
      "password": ["Password must contain at least one uppercase letter"]
    }
  }
}

// 409 Conflict - Email Already Exists
{
  "success": false,
  "error": {
    "code": "EMAIL_EXISTS",
    "message": "An account with this email already exists"
  }
}
```

---

### 2. Sign In (Login)

**Endpoint**: `POST /api/auth/login`  
**Authentication**: Not required  
**Rate Limit**: 5 requests per 15 minutes per IP

#### Request Body
```json
{
  "email": "teacher@school.com",
  "password": "StrongPass123!",
  "remember_me": true,
  "two_factor_code": "123456"
}
```

#### Validation Rules
```yaml
email: {
  required: true,
  format: email,
  maxLength: 255
}
password: {
  required: true,
  minLength: 1,
  maxLength: 128
}
remember_me: {
  optional: true,
  type: boolean
}
two_factor_code: {
  optional: true,
  pattern: "^\\d{6}$"
}
```

#### Success Response (200 OK)
```json
{
  "success": true,
  "message": "Login successful",
  "data": {
    "session": {
      "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
      "refresh_token": "v1.abc123...",
      "expires_in": 3600,
      "expires_at": 1728129600,
      "token_type": "bearer"
    },
    "user": {
      "id": "uuid-here",
      "email": "teacher@school.com",
      "email_confirmed_at": "2025-10-05T09:00:00Z",
      "role": "authenticated",
      "user_metadata": {
        "first_name": "John",
        "last_name": "Doe",
        "role": "teacher",
        "tenant_id": "school-123",
        "branch_id": "branch-456"
      },
      "app_metadata": {
        "provider": "email",
        "providers": ["email"]
      }
    }
  }
}
```

#### Error Responses
```json
// 401 Unauthorized - Invalid Credentials
{
  "success": false,
  "error": {
    "code": "INVALID_CREDENTIALS",
    "message": "Invalid email or password",
    "attempts_remaining": 4
  }
}

// 423 Locked - Account Locked
{
  "success": false,
  "error": {
    "code": "ACCOUNT_LOCKED",
    "message": "Account temporarily locked due to too many failed attempts",
    "locked_until": "2025-10-05T11:00:00Z",
    "duration_minutes": 60
  }
}

// 403 Forbidden - Email Not Verified
{
  "success": false,
  "error": {
    "code": "EMAIL_NOT_VERIFIED",
    "message": "Please verify your email address before logging in",
    "resend_url": "/api/auth/resend-verification"
  }
}

// 428 Precondition Required - 2FA Required
{
  "success": false,
  "error": {
    "code": "TWO_FACTOR_REQUIRED",
    "message": "Two-factor authentication code required",
    "temporary_token": "temp_token_here"
  }
}
```

---

### 3. Logout (Sign Out)

**Endpoint**: `POST /api/auth/logout`  
**Authentication**: Required  
**Rate Limit**: 10 requests per minute

#### Request Headers
```
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

#### Request Body
```json
{
  "scope": "global"
}
```

#### Success Response (200 OK)
```json
{
  "success": true,
  "message": "Logged out successfully",
  "data": {
    "sessions_terminated": 1,
    "scope": "current"
  }
}
```

---

### 4. Refresh Token

**Endpoint**: `POST /api/auth/refresh`  
**Authentication**: Required (Refresh Token)  
**Rate Limit**: 20 requests per hour

#### Request Body
```json
{
  "refresh_token": "v1.abc123..."
}
```

#### Success Response (200 OK)
```json
{
  "success": true,
  "message": "Token refreshed successfully",
  "data": {
    "session": {
      "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
      "refresh_token": "v1.def456...",
      "expires_in": 3600,
      "expires_at": 1728133200,
      "token_type": "bearer"
    }
  }
}
```

#### Error Responses
```json
// 401 Unauthorized - Invalid Refresh Token
{
  "success": false,
  "error": {
    "code": "INVALID_REFRESH_TOKEN",
    "message": "Refresh token is invalid or expired"
  }
}

// 409 Conflict - Token Reuse Detected
{
  "success": false,
  "error": {
    "code": "TOKEN_REUSE_DETECTED",
    "message": "Security alert: Token reuse detected. Please login again.",
    "action": "All sessions have been terminated"
  }
}
```

---

### 5. Forgot Password

**Endpoint**: `POST /api/auth/forgot-password`  
**Authentication**: Not required  
**Rate Limit**: 3 requests per hour per email

#### Request Body
```json
{
  "email": "teacher@school.com",
  "redirect_url": "https://yourdomain.com/reset-password"
}
```

#### Success Response (200 OK)
```json
{
  "success": true,
  "message": "If an account with that email exists, we've sent a password reset link",
  "data": {
    "email_sent": true,
    "expires_in": 3600
  }
}
```

#### Note
Always return success even if email doesn't exist (prevent email enumeration)

---

### 6. Reset Password

**Endpoint**: `POST /api/auth/reset-password`  
**Authentication**: Not required  
**Rate Limit**: 5 requests per hour per IP

#### Request Body
```json
{
  "token": "reset_token_from_email",
  "password": "NewStrongPass456!",
  "password_confirmation": "NewStrongPass456!"
}
```

#### Success Response (200 OK)
```json
{
  "success": true,
  "message": "Password reset successfully",
  "data": {
    "password_updated": true,
    "sessions_terminated": true
  }
}
```

---

### 7. Change Password

**Endpoint**: `POST /api/auth/change-password`  
**Authentication**: Required  
**Rate Limit**: 5 requests per hour

#### Request Body
```json
{
  "current_password": "CurrentPass123!",
  "new_password": "NewStrongPass456!",
  "new_password_confirmation": "NewStrongPass456!"
}
```

#### Success Response (200 OK)
```json
{
  "success": true,
  "message": "Password changed successfully",
  "data": {
    "password_changed": true,
    "other_sessions_terminated": true,
    "require_relogin": false
  }
}
```

#### Error Responses
```json
// 401 Unauthorized - Wrong Current Password
{
  "success": false,
  "error": {
    "code": "INVALID_PASSWORD",
    "message": "Current password is incorrect"
  }
}
```

---

### 8. Verify Email

**Endpoint**: `POST /api/auth/verify-email`  
**Authentication**: Not required  
**Rate Limit**: 10 requests per hour

#### Request Body
```json
{
  "token": "verification_token_from_email"
}
```

#### Success Response (200 OK)
```json
{
  "success": true,
  "message": "Email verified successfully",
  "data": {
    "email_verified": true,
    "verified_at": "2025-10-05T10:00:00Z"
  }
}
```

---

### 9. Resend Verification Email

**Endpoint**: `POST /api/auth/resend-verification`  
**Authentication**: Not required  
**Rate Limit**: 3 requests per hour per email

#### Request Body
```json
{
  "email": "teacher@school.com"
}
```

#### Success Response (200 OK)
```json
{
  "success": true,
  "message": "Verification email sent",
  "data": {
    "email_sent": true,
    "can_resend_at": "2025-10-05T11:00:00Z"
  }
}
```

---

### 10. Get Current User

**Endpoint**: `GET /api/auth/me`  
**Authentication**: Required  
**Rate Limit**: 100 requests per hour

#### Success Response (200 OK)
```json
{
  "success": true,
  "data": {
    "user": {
      "id": "uuid-here",
      "email": "teacher@school.com",
      "email_confirmed_at": "2025-10-05T09:00:00Z",
      "phone": "+1234567890",
      "user_metadata": {
        "first_name": "John",
        "last_name": "Doe",
        "role": "teacher",
        "tenant_id": "school-123",
        "branch_id": "branch-456"
      },
      "app_metadata": {
        "provider": "email",
        "providers": ["email"],
        "two_factor_enabled": true
      },
      "created_at": "2025-10-05T09:00:00Z",
      "updated_at": "2025-10-05T10:00:00Z",
      "last_sign_in_at": "2025-10-05T10:00:00Z"
    }
  }
}
```

---

## üîß IMPLEMENTATION EXAMPLES

### Login Endpoint Implementation

#### `src/app/api/auth/login/route.ts`
```typescript
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { loginSchema } from '@/lib/validations/auth'
import { rateLimit } from '@/lib/rate-limit'

export async function POST(request: NextRequest) {
  try {
    // Rate limiting
    const rateLimitResult = await rateLimit(request, {
      maxAttempts: 5,
      windowMs: 15 * 60 * 1000, // 15 minutes
    })

    if (!rateLimitResult.success) {
      return NextResponse.json(
        {
          success: false,
          error: {
            code: 'RATE_LIMIT_EXCEEDED',
            message: 'Too many login attempts. Please try again later.',
            retry_after: rateLimitResult.retryAfter,
          },
        },
        { status: 429 }
      )
    }

    // Parse and validate request body
    const body = await request.json()
    const validationResult = loginSchema.safeParse(body)
    
    if (!validationResult.success) {
      return NextResponse.json(
        {
          success: false,
          error: {
            code: 'VALIDATION_ERROR',
            message: 'Validation failed',
            details: validationResult.error.flatten().fieldErrors,
          },
        },
        { status: 400 }
      )
    }

    const { email, password, remember_me } = validationResult.data

    // Create Supabase client
    const supabase = await createClient()

    // Attempt login
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })

    if (error) {
      // Handle specific error cases
      if (error.message.includes('Invalid login credentials')) {
        return NextResponse.json(
          {
            success: false,
            error: {
              code: 'INVALID_CREDENTIALS',
              message: 'Invalid email or password',
              attempts_remaining: 5 - rateLimitResult.attempts,
            },
          },
          { status: 401 }
        )
      }

      if (error.message.includes('Email not confirmed')) {
        return NextResponse.json(
          {
            success: false,
            error: {
              code: 'EMAIL_NOT_VERIFIED',
              message: 'Please verify your email address before logging in',
              resend_url: '/api/auth/resend-verification',
            },
          },
          { status: 403 }
        )
      }

      throw error
    }

    // Success response
    return NextResponse.json(
      {
        success: true,
        message: 'Login successful',
        data: {
          session: data.session,
          user: data.user,
        },
      },
      { status: 200 }
    )
  } catch (error) {
    console.error('Login error:', error)
    return NextResponse.json(
      {
        success: false,
        error: {
          code: 'INTERNAL_ERROR',
          message: 'An unexpected error occurred. Please try again.',
        },
      },
      { status: 500 }
    )
  }
}
```

---

## üìä ERROR CODES REFERENCE

| Code | HTTP Status | Description |
|------|-------------|-------------|
| `VALIDATION_ERROR` | 400 | Request validation failed |
| `INVALID_CREDENTIALS` | 401 | Wrong email or password |
| `UNAUTHORIZED` | 401 | Missing or invalid token |
| `EMAIL_NOT_VERIFIED` | 403 | Email not verified |
| `ACCOUNT_LOCKED` | 423 | Too many failed attempts |
| `TWO_FACTOR_REQUIRED` | 428 | 2FA code required |
| `RATE_LIMIT_EXCEEDED` | 429 | Too many requests |
| `EMAIL_EXISTS` | 409 | Email already registered |
| `TOKEN_REUSE_DETECTED` | 409 | Security violation |
| `INTERNAL_ERROR` | 500 | Server error |

---

## üîí SECURITY MEASURES

### Rate Limiting
- **Login**: 5 attempts per 15 minutes per IP
- **Registration**: 3 attempts per hour per IP
- **Password Reset**: 3 attempts per hour per email
- **Token Refresh**: 20 attempts per hour per user

### Input Validation
- All inputs validated with Zod schemas
- Email format validation
- Password strength requirements
- XSS prevention through sanitization

### Token Security
- JWT tokens with secure signing
- Refresh token rotation
- Token reuse detection
- Secure token storage

---

## ‚úÖ COMPLETION CHECKLIST

- [x] All 10 endpoints defined
- [x] Request/response schemas documented
- [x] Error handling specified
- [x] Rate limiting configured
- [x] Security measures implemented
- [x] Validation rules defined
- [x] Implementation examples provided
- [x] Error codes documented
- [x] Success criteria defined
- [x] Integration points identified

---

## üîó RELATED SPECIFICATIONS

- **SPEC-035**: Supabase Auth Config (authentication setup)
- **SPEC-037**: Auth Context (client-side integration)
- **SPEC-038**: Auth Middleware (route protection)
- **SPEC-039**: RBAC Config (role-based access)
- **SPEC-LOGIN-FORM**: Login form (API consumption)

---

**File**: `SPEC-036-auth-api.yaml`  
**Last Updated**: October 5, 2025  
**Version**: 1.0.0  
**Status**: ‚úÖ COMPLETE